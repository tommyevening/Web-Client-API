import com.google.gson.Gson;
import com.google.gson.JsonObject;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

public class Service {
    private final String WEATHER_API_KEY = "4d0b712cfe32d5c8595dfd2cb312168d";
    private String country;
    private String currencyCode;

    public Service(String country) {
        this.country = country;
        // Map countries to their currency codes
        switch (country.toLowerCase()) {
            case "poland":
                this.currencyCode = "PLN";
                break;
            case "usa":
                this.currencyCode = "USD";
                break;
            case "germany":
                this.currencyCode = "EUR";
                break;
            // Add more mappings as needed
            default:
                this.currencyCode = "PLN"; // Default to PLN if country not found
        }
    }

    public String getWeather(String city) {
        try {
            String apiUrl = "https://api.openweathermap.org/data/2.5/weather?q=" + city + "," + country + "&appid=" + WEATHER_API_KEY + "&units=metric";
            URL url = new URL(apiUrl);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");

            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuilder response = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                response.append(line);
            }
            reader.close();

            // Parse the weather data to get relevant information
            JsonObject jsonObject = new Gson().fromJson(response.toString(), JsonObject.class);
            JsonObject main = jsonObject.getAsJsonObject("main");
            JsonObject weather = jsonObject.getAsJsonArray("weather").get(0).getAsJsonObject();

            double temp = main.get("temp").getAsDouble();
            String description = weather.get("description").getAsString();

            return String.format("Temperature: %.2fÂ°C, Conditions: %s", temp, description);
        } catch (Exception e) {
            return "Error: " + e.getMessage();
        }
    }

    public Double getRateFor(String targetCurrency) {
        try {
            String apiUrl = "https://api.exchangerate-api.com/v4/latest/" + currencyCode;
            URL url = new URL(apiUrl);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");

            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuilder response = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                response.append(line);
            }
            reader.close();

            JsonObject jsonObject = new Gson().fromJson(response.toString(), JsonObject.class);
            return jsonObject.getAsJsonObject("rates").get(targetCurrency).getAsDouble();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public Double getNBPRate() {
        try {
            String apiUrl = "http://api.nbp.pl/api/exchangerates/rates/a/usd/?format=json";
            URL url = new URL(apiUrl);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");

            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuilder response = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                response.append(line);
            }
            reader.close();

            JsonObject jsonObject = new Gson().fromJson(response.toString(), JsonObject.class);
            return jsonObject.getAsJsonArray("rates").get(0).getAsJsonObject().get("mid").getAsDouble();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
}